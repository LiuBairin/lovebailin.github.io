import{d as p,o as t,c as o,a as e,b as c,_ as l}from"./app-6cb5fdbe.js";import{B as u}from"./BlTitle-e6ef2f67.js";const r={class:"write markdown-body"},i=c(`<h2 id="es2019(es10)%E5%B8%A6%E6%9D%A5%E7%9A%84-9-%E4%B8%AA%E6%96%B0%E7%89%B9%E6%80%A7" tabindex="-1">ES2019(ES10)带来的 9 个新特性</h2><h3 id="string.prototype.trimstart()-%2F-string.prototype.trimend()" tabindex="-1">String.prototype.trimStart() / String.prototype.trimEnd()</h3><p>在接收用户输入的文本，我们经常会把头尾的空格文本去掉，来规避展示的不受控情况。自 ES5 来，<code class="">String.prototype.trim()</code> 被用于去除头尾上的空格、换行符等，现在通过 <code class="">trimStart()</code>，<code class="">trimEnd()</code> 来头和尾进行单独控制。<code class="">trimLeft()</code>、<code class="">trimRight()</code> 是他们的别名。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&#39; Hello ES2019! &#39;</span>
string<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;Hello ES2019! &#39;</span>
string<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39; Hello ES2019!&#39;</span>
</code></pre><h3 id="object.fromentries()" tabindex="-1">Object.fromEntries()</h3><p>ES8 为我们引入了<code class="">Object.entries</code>把一个对象转为<code class="">[key, value]</code>键值对的形式，可以运用于像 Map 这种结构中。凡事有来有回，<code class="">Object.fromEntries()</code>用于把键值对还原成对象结构。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> object <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token comment">// { foo: &#39;bar&#39; }</span>
</code></pre><h3 id="array.prototype.flat()-%2F-array.prototype.flatmap()" tabindex="-1">Array.prototype.flat() / Array.prototype.flatMap()</h3><p>把数组展平是 Array 原型给我们带来的新特性，通过传入层级深度参数（默认为 1），来为下层数组提升层级。如果想提升所有层级可以写一个比较大的数字甚至是<code class="">Infinity</code>，当然不推荐这么做。</p><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3, 4 ]</span>
<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3, 4, 5, 6 ]</span>
</code></pre><p><code class="">Array.prototype.flatMap()</code> 它是 <code class="">Array.prototype.map()</code> 和<code class="">Array.prototype.flat()</code>的组合，通过对 map 调整后的数据尝试展平操作。</p><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> v <span class="token operator">*</span> <span class="token number">2</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// [2, 4, 6, 8]</span>
</code></pre><h3 id="catch-%E7%9A%84%E5%8F%82%E6%95%B0%E6%94%B9%E4%B8%BA%E5%8F%AF%E9%80%89" tabindex="-1">catch 的参数改为可选</h3><p>在进行 <code class="">try...catch</code> 错误处理过程中，如果没有给 catch 传参数的话，代码就会报错。有时候我们并不关心错误情况，如：</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isValidJSON</span> <span class="token operator">=</span> <span class="token parameter">json</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>unusedError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Unused error parameter</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>在新规范中，我们可以省略 catch 绑定的参数和括号。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isValidJSON</span> <span class="token operator">=</span> <span class="token parameter">json</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="symbol.description" tabindex="-1">Symbol.description</h3><p><code class="">Symbol</code> 是 ES6 中引入的基本数据类型，可以用作对象属性的标识符。描述属性是只读的，可用于获取符号对象的描述，更好了解它的作用。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;This is a Symbol&#39;</span><span class="token punctuation">)</span>
symbol <span class="token comment">// Symbol(This is a Symbol)</span>
Symbol<span class="token punctuation">.</span>description <span class="token comment">// &#39;This is a Symbol&#39;</span>
</code></pre><h3 id="json-superset-%E8%B6%85%E9%9B%86" tabindex="-1">JSON Superset 超集</h3><p>之前如果 JSON 字符串中包含有行分隔符(\\u2028) 和段落分隔符(\\u2029)，那么在解析过程中会报错。</p><pre class="language-javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;\\u2028&quot;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// SyntaxError</span>
</code></pre><p>现在 ES2019 对它们提供了支持。</p><pre class="language-javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;\\u2028&quot;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&#39;</span>
</code></pre><h3 id="json.stringify()-%E5%8A%A0%E5%BC%BA%E6%A0%BC%E5%BC%8F%E8%BD%AC%E5%8C%96" tabindex="-1">JSON.stringify() 加强格式转化</h3><p>我们看一下熟知的 emoji 表现：</p><pre class="language-javascript"><code class="language-javascript"><span class="token string">&#39;😎&#39;</span><span class="token punctuation">.</span>length <span class="token comment">// 2</span>
</code></pre><p>JavaScript 将 emoji 解释为两个字符的原因是 UTF-16 将 emojis（以及其他不寻常的字符）表示为两个代理项的组合。我们的 emoji 用字符’\\uD83D’和’\\uDE0E’编码。但是如果试图单独编写这样一个字符，例如’\\uD83D’，则会认为这是一个无效的文本字符串。在早期版本中，这些字符将替换为特殊字符：</p><pre class="language-javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;\\uD83D&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&quot;�&quot;&#39;</span>
</code></pre><p>现在在字符代码之前插入转义字符，结果仍是可读且有效的 UTF-8/UTF-16 代码：</p><pre class="language-javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">&#39;\\uD83D&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;&quot;\\\\ud83d&quot;&#39;</span>
</code></pre><h3 id="array.prototype.sort()-%E6%9B%B4%E5%8A%A0%E7%A8%B3%E5%AE%9A" tabindex="-1">Array.prototype.sort() 更加稳定</h3><p>之前，规范允许不稳定的排序算法，如快速排序。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>a <span class="token operator">-</span> b<span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token comment">// [{a: 1, b: 2}, {a: 1, b: 3}...] / [{a: 1, b: 3}, {a: 1, b: 2}...]</span>
</code></pre><p>在之前的排序中，可能出现 <code class="">[{a: 1, b: 2}, {a: 1, b: 3}...]</code>、<code class="">[{a: 1, b: 3}, {a: 1, b: 2}...]</code> 等多种情况。</p><p>现在所有主流浏览器都使用稳定的排序算法。实际上，这意味着如果我们有一个对象数组，并在给定的键上对它们进行排序，那么列表中的元素将保持相对于具有相同键的其他对象的位置。</p><h3 id="function.prototype.tostring()-%E9%87%8D%E6%96%B0%E4%BF%AE%E8%AE%A2" tabindex="-1">Function.prototype.toString() 重新修订</h3><p>从 ES2019 开始，<code class="">Function.prototype.toString()</code>将从头到尾返回源代码中的实际文本片段。这意味着还将返回注释、空格和语法详细信息。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token comment">/* a comment */</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>之前，<code class="">Function.prototype.toString()</code>只会返回了函数的主体，但没有注释和空格。</p><pre class="language-javascript"><code class="language-javascript">foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;function foo() {}&#39;</span>
</code></pre><p>但现在，函数返回的结果与编写的一致。</p><pre class="language-javascript"><code class="language-javascript">foo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;function /* a comment  */ foo () {}&#39;</span>
</code></pre>`,44),E={title:"ES2019(ES10)带来的 9 个新特性",date:1678536555e3,category:["ecma","js"]},j="",k=p({__name:"es10",setup(d,{expose:n}){const s="ES2019(ES10)带来的 9 个新特性",a=["ecma","js"];return n({frontmatter:{title:"ES2019(ES10)带来的 9 个新特性",date:1678536555e3,category:["ecma","js"]},excerpt:void 0}),(g,y)=>(t(),o("div",r,[e(u,{title:s,date:1678536555e3,category:a}),i]))}}),S=l(k,[["__file","C:/Users/44513/Desktop/blog/docs/ecma/es10.md"]]);export{S as default,j as excerpt,E as frontmatter};
