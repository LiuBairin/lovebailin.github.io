import{d as p,o as t,c as o,a as e,b as c,_ as l}from"./app-6cb5fdbe.js";import{B as u}from"./BlTitle-e6ef2f67.js";const r={class:"write markdown-body"},k=c(`<h2 id="es2017(es8)%E6%96%B0%E7%89%B9%E6%80%A7" tabindex="-1">ES2017(ES8)新特性</h2><h3 id="object.values()-%2F-object.entries()" tabindex="-1">Object.values() / Object.entries()</h3><p>在 ES6 前，如果我们想拿一个对象的所有值放在数组中，可能得这么写：</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>
<span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
array <span class="token comment">// [1, 2, 3]</span>
</code></pre><p>现在，通过 Object.values() 可以便捷的取出来：</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3]</span>
</code></pre><p>Object.entries() 则是 Object.keys() 和 Object.keys() 的结合形式，返回一个 key value 键值对的数组。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token comment">// [[&#39;a&#39;, 1], [&#39;b&#39;, 2], [&#39;c&#39;, 3]]</span>
</code></pre><p>Object.entries() 获得的数组可用于 ES6 带来的 <code class="">Map</code> 结构：</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Map(3) {&quot;a&quot; =&gt; 1, &quot;b&quot; =&gt; 2, &quot;c&quot; =&gt; 3}</span>
</code></pre><h3 id="string.prototype.padstart()-%2F-string.prototype.padend()" tabindex="-1">String.prototype.padStart() / String.prototype.padEnd()</h3><p>这两个函数的作用是在头尾添加字符串，它们接收两个参数 <code class="">str.padStart(targetLength [, padString])</code>，其中 <code class="">targetLength</code> 表示填充完的字符串长度，<code class="">padString</code> 表示填充的字符串，默认空格</p><pre class="language-javascript"><code class="language-javascript"><span class="token string">&#39;es8&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// &#39; es8&#39;，默认填入空格</span>
<span class="token string">&#39;es8&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;es80&#39;，填充自定义字符串</span>
<span class="token string">&#39;es8&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// &#39;es8&#39;，如果长度小于原字符串，返回原字符串</span>
<span class="token string">&#39;es8&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;abces8&#39;，如果填充字符串+原字符串长度大于给定长度，则从填充字符串左边开始截取</span>
<span class="token string">&#39;es8&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;es8abc&#39;，padEnd也是从填充字符串左边开始截取</span>
<span class="token string">&#39;es8&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;abcaes8&#39;，如果填充字符串+原字符串长度小于给定长度，则从填充字符串重复填充</span>
</code></pre><h3 id="object.getownpropertydescriptors" tabindex="-1">Object.getOwnPropertyDescriptors</h3><p>该函数返回指定对象（参数）的所有自身属性描述符。自身属性描述符就是在对象自身内定义，不是通过原型链继承来的属性。该函数返回的每个描述符对象可能会有的 <code class="">key</code> 值分别是：<code class="">configurable</code>、<code class="">enumerable</code>、<code class="">writable</code>、<code class="">get</code>、<code class="">set</code> 和 <code class="">value</code>。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>
<span class="token comment">// {</span>
<span class="token comment">//   a: {</span>
<span class="token comment">//     configurable: true,</span>
<span class="token comment">//     enumerable: true,</span>
<span class="token comment">//     value: 1,</span>
<span class="token comment">//     writable: true</span>
<span class="token comment">//   },</span>
<span class="token comment">//   b: {</span>
<span class="token comment">//     configurable: true,</span>
<span class="token comment">//     enumerable: true,</span>
<span class="token comment">//     get: f b(), //the getter function</span>
<span class="token comment">//     set: undefined</span>
<span class="token comment">//   }</span>
<span class="token comment">// }</span>
</code></pre><h3 id="%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8%E5%92%8C%E8%B0%83%E7%94%A8%E4%B8%AD%E7%9A%84%E5%B0%BE%E9%80%97%E5%8F%B7" tabindex="-1">函数参数列表和调用中的尾逗号</h3><p>ES8 允许在函数定义或者函数调用时，最后一个参数之后存在一个结尾逗号而不报<code class="">SyntaxError</code>的错误。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// doSomething</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><p>这种情况常见于多行参数风格，</p><pre class="language-javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><p>现在再也不会因为增加参数忘了删除逗号而导出报错了。</p><h3 id="async%2Fawait-%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0" tabindex="-1">async/await 异步函数</h3><p><code class="">async</code> 关键字定义的函数声明定义了一个可以异步执行的函数，它返回一个 <code class="">Async Function</code> 类型的对象。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">add10</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">10</span>
<span class="token punctuation">}</span>
add10 <span class="token comment">// async ƒ add10 (num) {return num + 10;}</span>
</code></pre><p>它的返回值是一个 <code class="">Promise</code> 实例：</p><pre class="language-javascript"><code class="language-javascript"><span class="token function">add10</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// Promise {&lt;fulfilled&gt;: 20}</span>
</code></pre><p><code class="">await</code> 放置在 <code class="">Promise</code> 调用之前，<code class="">await</code> 强制后面点代码等待，直到 <code class="">Promise</code> 对象<code class="">resolve</code>，得到 <code class="">resolve</code> 的值作为 await 表达式的运算结果。且 <code class="">await</code> 只能在 <code class="">async</code> 函数内部使用。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">add10</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// 20</span>
  <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">10</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Promise {&lt;fulfilled&gt;: 30}</span>
</code></pre><p>如果想获得 <code class="">Promise</code> 的 <code class="">catch</code> 情况，我们可以通过 <code class="">try...catch</code> 来解决。</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token comment">// Error: error</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Promise {&lt;fulfilled&gt;: true}</span>
</code></pre>`,31),j={title:"ES2017(ES8)新特性",date:1678536553e3,category:["ecma","js"]},w="",i=p({__name:"es8",setup(d,{expose:n}){const s="ES2017(ES8)新特性",a=["ecma","js"];return n({frontmatter:{title:"ES2017(ES8)新特性",date:1678536553e3,category:["ecma","js"]},excerpt:void 0}),(b,g)=>(t(),o("div",r,[e(u,{title:s,date:1678536553e3,category:a}),k]))}}),E=l(i,[["__file","C:/Users/44513/Desktop/blog/docs/ecma/es8.md"]]);export{E as default,w as excerpt,j as frontmatter};
